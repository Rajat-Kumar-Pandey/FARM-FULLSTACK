Frontend development involves various components that help structure and build user interfaces. Here's a categorized list of different frontend components used in modern web development:

### **1. Layout Components**
   - **Navbar** â€“ Top navigation bar for site-wide links.
   - **Sidebar** â€“ Vertical navigation menu.
   - **Header** â€“ Page or section heading.
   - **Footer** â€“ Bottom section with additional links and information.
   - **Grid System** â€“ Layout structure (e.g., Bootstrap Grid, CSS Grid).
   - **Container** â€“ Wrappers to maintain consistent spacing.
   - **Card** â€“ Box-style content blocks.

### **2. Navigation Components**
   - **Breadcrumbs** â€“ Indicates the userâ€™s location on the site.
   - **Tabs** â€“ Switch between sections without reloading.
   - **Pagination** â€“ Divides content into pages.
   - **Dropdowns** â€“ Expanding menu for navigation or selection.
   - **Accordion** â€“ Expand/collapse content sections.

### **3. Form & Input Components**
   - **Button** â€“ Clickable elements for actions.
   - **Text Field** â€“ Input field for text data.
   - **Checkbox** â€“ Select/deselect options.
   - **Radio Button** â€“ Select one option from a group.
   - **Dropdown/Select** â€“ Choose from multiple options.
   - **Date Picker** â€“ Select date/time.
   - **File Upload** â€“ Upload files from the device.
   - **Toggle Switch** â€“ On/Off switch for settings.
   - **Search Bar** â€“ Input field for searching content.

### **4. Display Components**
   - **Modal/Popup** â€“ Overlays for additional content.
   - **Tooltip** â€“ Hover-over informational text.
   - **Toast Notification** â€“ Small messages for alerts.
   - **Badge** â€“ Small counters or status indicators.
   - **Carousel/Slider** â€“ Rotating images or content.
   - **Image Gallery** â€“ Grid of images.
   - **Progress Bar** â€“ Indicates loading or progress.
   - **Skeleton Loader** â€“ Placeholder for loading content.

### **5. Data Display Components**
   - **Table** â€“ Displays structured data.
   - **List** â€“ Ordered/unordered lists of items.
   - **Card Grid** â€“ Displays multiple items in a structured format.
   - **Charts & Graphs** â€“ Visual representation of data (e.g., bar chart, pie chart).

### **6. Feedback Components**
   - **Alerts** â€“ Notifications for errors, warnings, success.
   - **Snackbar** â€“ Temporary notification at the bottom.
   - **Loading Spinner** â€“ Shows a process is ongoing.

### **7. Media Components**
   - **Image** â€“ Displays images on the UI.
   - **Video Player** â€“ Embedded or hosted videos.
   - **Audio Player** â€“ Play audio files.
   - **Icon** â€“ Small visual representations of actions or objects.

### **8. Authentication Components**
   - **Login Form** â€“ Input fields for username & password.
   - **Signup Form** â€“ Registration fields.
   - **OTP Input** â€“ Verification code entry.
   - **Profile Avatar** â€“ User profile picture.

### **9. Utility Components**
   - **Theme Switcher** â€“ Toggle between dark/light modes.
   - **Clipboard Copy Button** â€“ Copies text to clipboard.
   - **Hover Effects** â€“ Interactive animations.
   - **Back to Top Button** â€“ Scrolls to the top of the page.

Would you like suggestions on implementing these in React with Vite? ðŸš€








POST - Create Todo
jsx
Copy
Edit
const createTodo = (newTask) => {
  axios
    .post('/api/todo', newTask) // Endpoint for creating a new todo
    .then((response) => {
      setTasks([...tasks, response.data]); // Add new task to the state
    })
    .catch((error) => {
      console.error("Error creating todo:", error); // Handle errors
    });
};
PUT - Update Todo
jsx
Copy
Edit
const updateTodo = (taskId, updatedTask) => {
  axios
    .put(`/api/todo/update/${taskId}`, updatedTask) // Endpoint for updating a todo
    .then((response) => {
      const updatedTasks = tasks.map((task) =>
        task.task_id === taskId ? response.data : task
      );
      setTasks(updatedTasks); // Update task in the state
    })
    .catch((error) => {
      console.error("Error updating todo:", error); // Handle errors
    });
};
DELETE - Delete Todo
jsx
Copy
Edit
const deleteTodo = (taskId) => {
  axios
    .delete(`/api/todo/${taskId}`) // Endpoint for deleting a todo
    .then(() => {
      const filteredTasks = tasks.filter((task) => task.task_id !== taskId);
      setTasks(filteredTasks); // Remove deleted task from the state
    })
    .catch((error) => {
      console.error("Error deleting todo:", error); // Handle errors
    });
};
4. Handling Task Filtering and Searching (Optional)
If you want to integrate the GET /api/todo/filter and GET /api/todo/search endpoints into the app for filtering and searching tasks, you can update the useEffect to conditionally call these APIs based on user input. For example:

Filter Tasks
jsx
Copy
Edit
const filterTasks = (priority) => {
  axios
    .get(`/api/todo/priority/${priority}`) // Fetch tasks by priority
    .then((response) => {
      setTasks(response.data); // Update tasks state
    })
    .catch((error) => {
      console.error("Error filtering tasks:", error); // Handle errors
    });
};
Search Tasks
jsx
Copy
Edit
const searchTasks = (query) => {
  axios
    .get(`/api/todo/search`, { params: { query } }) // Fetch tasks by search query
    .then((response) => {
      setTasks(response.data); // Update tasks state
    })
    .catch((error) => {
      console.error("Error searching tasks:", error); // Handle errors
    });
};